# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: api-dicionario-FAAS

plugins:
    - serverless-dynamodb
    - serverless-offline

custom:
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, 'us-east-1'}
    environment: ${self:custom.stage}
    tableThroughputs:
        prod: 1
        default: 1
    dynamodb:
        port: 8000
        inMemory: true
        migrate: true
        convertEmptyValues: true
    serverless-dynamodb:
        stages:
            - dev
        tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
        start:
            port: ${self:custom.dynamodb.port}
            inMemory: ${self:custom.dynamodb.inMemory}
            migrate: ${self:custom.dynamodb.migrate}
            convertEmptyValues: ${self:custom.dynamodb.convertEmptyValues}
            enableLogs: true

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
    name: aws
    runtime: nodejs18.x
    stage: dev
    timeout: 30

    environment:
        tableName: CsaTable
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
    obter:
        handler: handler.getCsas
        events:
            - http:
                  path: /
                  method: get
                  cors: true
    obterUm:
        handler: handler.getcsaById
        events:
            - http:
                  path: /{id}
                  method: get
                  cors: true
    create:
        handler: handler.createCsa
        events:
            - http:
                  path: /
                  method: post
                  cors: true

# DynamoDB
resources:
    Resources:
        CsaTable:
            Type: "AWS::DynamoDB::Table"
            DeletionPolicy: Retain
            Properties:
                TableName: CsaTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 5
                    WriteCapacityUnits: 5
# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.lambda
#     events:
#       - http:
#           path: lambda
#           method: get
#           cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
